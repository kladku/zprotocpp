.template 0

include "zproto_lib.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate
.output "$(class.package_dir)/$(class.name).h"

/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.NAME)_H_INCLUDED
#define $(CLASS.NAME)_H_INCLUDED

#include <zmq.hpp>
#include <unordered_map>
#include <array>
#include <vector>

using frame = zmq::message_t;
using frames = std::vector<frame>;

class buffer
{
public:
    buffer(zmq::message_t &msg)
        : needle_(static_cast<uint8_t*>(msg.data()))
    {}

    template<typename T, std::size_t N>
    friend buffer& operator<<(buffer &b, const std::array<T,N> &host);

    template<typename T>
    friend buffer& operator<<(buffer &b, const T &host);

    template<typename T>
    friend buffer& operator<<(buffer &b, const T *host);

private:
    uint8_t *needle_;
};

template<typename T>
buffer& operator<<(buffer &b, const T &host)
{
    static_assert(sizeof(typename T::value_type) == 1, "Expected byte size");
    b << static_cast<uint32_t>(host.size());
    b.needle_ += 4;
    std::copy(std::begin(host), std::end(host), b.needle_);
    b.needle_ += host.size();
    return b;
}

template<>
buffer& operator<<<uint8_t>(buffer &b, const uint8_t &host)
{
    *b.needle_ = host;
    ++b.needle_;
    return b;
}

template<>
buffer& operator<<<uint16_t>(buffer &b, const uint16_t &host)
{
    b.needle_[0] = (uint8_t)((host >> 8) & 0xFF);
    b.needle_[1] = (uint8_t)((host)      & 0xFF);
    b.needle_ += 2;
    return b;
}

template<>
buffer& operator<<<uint32_t>(buffer &b, const uint32_t &host)
{
    b.needle_[0] = (uint8_t)((host >> 24) & 0xFF);
    b.needle_[1] = (uint8_t)((host >> 16) & 0xFF);
    b.needle_[2] = (uint8_t)((host >>  8) & 0xFF);
    b.needle_[3] = (uint8_t)((host)       & 0xFF);
    b.needle_ += 4;
    return b;
}

template<>
buffer& operator<<<uint64_t>(buffer &b, const uint64_t &host)
{
    b.needle_[0] = (uint8_t)((host >> 56) & 0xFF);
    b.needle_[1] = (uint8_t)((host >> 48) & 0xFF);
    b.needle_[2] = (uint8_t)((host >> 40) & 0xFF);
    b.needle_[3] = (uint8_t)((host >> 32) & 0xFF);
    b.needle_[4] = (uint8_t)((host >> 24) & 0xFF);
    b.needle_[5] = (uint8_t)((host >> 16) & 0xFF);
    b.needle_[6] = (uint8_t)((host >>  8) & 0xFF);
    b.needle_[7] = (uint8_t)((host)       & 0xFF);
    b.needle_ += 8;
    return b;
}

template<>
buffer& operator<<<std::vector<std::string>>(buffer &b, const std::vector<std::string> &host)
{
    b << static_cast<uint32_t>(host.size());
    for (const auto &s : host)
        b << s;
    return b;
}

template<>
buffer& operator<<(buffer &b, const std::unordered_map<std::string, std::string> &host)
{
    b << static_cast<uint32_t>(host.size());
    for (const auto &s : host) {
        b << static_cast<uint8_t>(s.first.size());
        std::copy(std::begin(s.first), std::end(s.first), b.needle_);
        ++b.needle_ += s.first.size();
        b << s.second;
    }
    return b;
}

template<typename T, std::size_t N>
buffer& operator<<(buffer &b, const std::array<T,N> &host)
{
    static_assert(sizeof(T) == 1, "Expected byte size");
    std::copy(std::begin(host), std::end(host), b.needle_);
    b.needle_ += N;
    return b;
}

template<>
buffer& operator<<(buffer &b, const std::array<char,256> &host)
{
    std::size_t size = std::strlen(host.data());
    b << (uint8_t)size;
    std::copy(std::begin(host), std::next(std::begin(host), size), b.needle_);
    b.needle_ += size;
    return b;
}

template<>
buffer& operator<<(buffer &b, const char* host)
{
    std::size_t size = std::strlen(host);
    b << (uint8_t)size;
    memcpy(b.needle_, host, size);
    b.needle_ += size;
    return b;
}

enum MessageId : uint8_t {
.for class.message
.   if defined (message.id)
.       message.comma = last() ?? "" ? ","
    $(NAME:c)_MESSAGE = $(message.id)$(comma)
.   else
.       echo "E: required attribute 'id' not defined in $(class.name)"
.   endif
.endfor
};

.for class.message
class Msg$(message.name:Pascal)
{
public:
    MessageId id() const {
        return $(NAME:c)_MESSAGE;
    }

.   for message.field where defined (value)
    // Get $(name)
.   if type = "number"
.   if ctype = "byte"
    uint8_t $(name)() const {
        return $(name)_;
    }
.   else
    $(ctype) $(name)() const {
        return $(name)_;
    }
.   endif
.   elsif type = "string"
    const char* $(name)() const {
        return $(name)_;
    }
.   endif
.   endfor

.   for message.field
.   if type = "number" & !defined (field.value)
    // Get & Set $(name)
.   if ctype = "byte"
    uint8_t $(name)() const {
        return $(name)_;
    }
    void set_$(name)(uint8_t $(name)) {
        $(name)_ = $(name);
    }
.   else
    $(ctype) $(name)() const {
        return $(name)_;
    }
    void set_$(name)($(ctype) $(name)) {
        $(name)_ = $(name);
    }
.   endif
.   elsif type = "octets"
    // Get & Set $(name)
    const std::array<uint8_t, $(size)>& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::array<uint8_t, $(size)>& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "string" & !defined (field.value)
    // Get & Set $(name)
    const std::array<char, 256>& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::array<char, 256>& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "longstr"
    // Get & Set $(name)
    const std::string& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::string& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "strings"
    // Get & Set $(name)
    const std::vector<std::string>& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::vector<std::string>& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "hash"
    // Get & Set $(name)
    const std::unordered_map<std::string, std::string>& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::unordered_map<std::string, std::string>& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "uuid"
    // Get & Set $(name)
    const std::array<uint8_t, 16>& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::array<uint8_t, 16>& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "chunk"
    // Get & Set $(name)
    const std::vector<uint8_t>& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const std::vector<uint8_t>& $(name)) {
        $(name)_ = $(name);
    }
.   elsif type = "frame"
    // Get & Set $(name)
    const frame& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const frame& $(name)) {
        $(name)_.rebuild($(name).data(), $(name).size());
    }
.   elsif type = "msg"
    // Get & Set $(name)
    const frames& $(name)() const {
        return $(name)_;
    }
    void set_$(name)(const frames& $(name)) {
        $(name)_.clear();
        for (const auto &f : $(name))
            $(name)_.emplace_back(frame(f.data(), f.size()));
    }
.   endif
.   endfor

private:
.   for message.field where defined (value)
    // Get $(name)
.   if type = "number"
.   if ctype = "byte"
    const uint8_t $(name)_ = $(value);
.   else
    const $(ctype) $(name)_ = $(value);
.   endif
.   elsif type = "string"
    const char $(name)_[256] = u8"$(value)";
.   endif
.   endfor

.   for message.field
.   if type = "number" & !defined (field.value)
.   if ctype = "byte"
    uint8_t $(name)_;                     //  $(string.trim (field.)?name:left,block)
.   else
    $(ctype) $(name)_;                    //  $(string.trim (field.)?name:left,block)
.   endif
.   elsif type = "octets"
    std::array<uint8_t, $(size)> $(name)_;      //  $(string.trim (field.)?name:left,block)
.   elsif type = "string" & !defined (field.value)
    std::array<char, 256> $(name)_;       //  $(string.trim (field.)?name:left,block)
.   elsif type = "longstr"
    std::string $(name)_;                 //  $(string.trim (field.)?name:left,block)
.   elsif type = "strings"
    std::vector<std::string> $(name)_;    //  $(string.trim (field.)?name:left,block)
.   elsif type = "hash"
    std::unordered_map<std::string, std::string> $(name)_;         //  $(string.trim (field.)?name:left,block)
.   elsif type = "uuid"
    std::array<uint8_t, 16> $(name)_;     //  $(string.trim (field.)?name:left,block)
.   elsif type = "chunk"
    std::vector<uint8_t> $(name)_;        //  $(string.trim (field.)?name:left,block)
.   elsif type = "frame"
    frame $(name)_;                       //  $(string.trim (field.)?name:left,block)
.   elsif type = "msg"
    frames $(name)_;                      //  $(string.trim (field.)?name:left,block)
.   endif
.   endfor
    
    friend frames& operator<<(frames &, const Msg$(message.name:Pascal) &);
    friend frames& operator>>(frames &, Msg$(message.name:Pascal) &)
};

frames& operator<<(frames &f, const Msg$(message.name:Pascal) &m)
{
    size_t frame_size += 2 + 1;        // signature + message id
.   for message.field
.   if type = "number"
    frame_size += $(size);      // $(name)
.   elsif type = "octets"
    frame_size += $(size);      // $(name)
.   elsif type = "string"
.   if !defined (field.value)
    frame_size += 1 + std::strlen(m.$(name)_.data()); // $(name)
.   else
    frame_size += 1 + std::strlen(m.$(name)_); // $(name)
.   endif
.   elsif type = "longstr"
    frame_size += 4 + m.$(name)_.size(); // $(name)
.   elsif type = "strings"
    frame_size += 4;            // $(name)
    for (const auto &s : m.$(name)_)
        frame_size += 4 + s.size();
.   elsif type = "hash"
    frame_size += 4;            // $(name)
    for (const auto &p : m.$(name)_)
        frame_size += 1 + p.first.size() + 4 + p.second.size();
.   elsif type = "uuid"
    frame_size += 16;           // $(name)
.   elsif type = "chunk"
    frame_size += 4 + m.$(name)_.size();  // $(name)
.   elsif type = "frame"
.   elsif type = "msg"
.       class.msg = name
.       if item () <> count (message.field)
.           echo "E: in $(message.name:), $(field.name) must come last"
.       endif
.   endif
.   endfor

    frame content(frame_size);
    buffer b(content);
    b << (uint16_t)(0xAAA0 | $(class.signature));
    b << (uint8_t)m.id();
.   for message.field
.   if type <> "msg" & type <> "frame"
    b << m.$(name)_;
.   endif
.   endfor
    f.emplace_back(std::move(content));
.   for message.field
.   if type = "frame"
    f.emplace_back(frame(m.$(name)_.data(), m.$(name)_.size()));
.   endif
.   endfor
.   for message.field
.   if type = "msg"
    for (auto &mf : m.$(name)_)
        f.emplace_back(frame(mf.data(), mf.size()));
.   endif
.   endfor
    return f;
}

frames& operator>>(const frames &f, Msg$(message.name:Pascal) &m)
{
    size_t frame_size += 2 + 1;        // signature + message id
    if (f.empty())
        return;
    const frame &content = f[0];
    buffer b(content);
    uint16_t signature;
    b >> signature;
    if (signature != (0xAAA0 | $(class.signature))) {
        //zsys_warning ("$(class.name): invalid signature");
        //goto malformed;         //  Interrupted
        return;
    }
    uint8_t id;
    b >> id;
    if (id != m.id()) {
        //log 
        return;
    }
.   for message.field
.   if type <> "msg" & type <> "frame"
    b >> m.$(name)_;
.   endif
.   endfor
    size_t frame_no = 0;
.   for message.field
.   if type = "frame"
    if (++frame_no < f.size())
        m.$(name)_.rebuild(f[frame_no].data(), f[frame_no].size());
.   endif
.   endfor
    size_t msg_no = 0;
.   for message.field
.   if type = "msg"
    for (size_t msg_no = 0; frame_no < f.size(); ++frame_no, ++msg_no)
        m.$(name)_[msg_no].rebuild(f[frame_no].data(), f[frame_no].size());
.   endif
.   endfor
    return f;
}
.endfor

#endif
