.# Include headers
.template 0

for contract.class
    for class.property
    if defined(property.include)
        if count (contract.header, name = "$(include:)") = 0
            new contract.header
                echo "Including <$(include:)> header"
                header.name = "$(include:)"
            endnew
        endif
    endif
    # Move incomplete classes after class declaration that are missing
    # This should use a more complex algorithm, but for now it's enough
    if defined(property.extended) & extended = "true"
        extended_type = "$(type:)"
        incomplete_class = class
        for contract.class where class.name = extended_type
            echo "Moving $(incomplete_class.name:) after $(class.name:)"
            move incomplete_class after class
        endfor
    endif
    endfor
endfor

function resolve_inheritance (class)
    if defined (my.class.inherits)
        first_property = my.class->property
        for contract.class as super where name = my.class.inherits
            resolve_inheritance (super)
            for property where count (my.class.property, name = -1.name) = 0
                echo "Copying $(property.name:) into $(my.class.name:)"
                copy property to my.class before first_property
            endfor
        else
            echo "E: super $(inherits:) isn't defined"
        endfor
    endif
endfunction

for class
    resolve_inheritance (class)
endfor

.endtemplate

.# Generate header file
.output "$(contract.name).h"
/**********************************/
/**           WARNING!           **/
/** This file is auto generated. **/
/**        DO NOT MODIFY         **/
/**********************************/

#ifndef _$(contract.NAME)_H_
#define _$(contract.NAME)_H_

.# Include needed headers
.for contract.header
#include <$(header.name)>
.endfor

enum ClassId {
.for contract.class
.   class.comma = last()?? ""? ","
    $(name:)_Class = $(index ())$(comma)
.endfor
};

.for contract.class
class $(name:)
{
public:
    $(name:)();
    ~$(name:)();

.   for class.property
.   constant_ = (defined(property.extended) & extended = "true") ?? "const " ? ""
.   reference_ = (defined(property.extended) & extended = "true") ?? "&" ? ""
    $(constant_)$(type:)$(reference_) $(name:c)() const;
    void set_$(name:c)($(constant_)$(type:) $(reference_)$(name:c));

.   endfor
private:
.   for class.property
    $(type:) $(name:c)_;
.   endfor

};

.endfor

#endif // _$(contract.NAME)_H_

.# Generate source file
.output "$(contract.name).cpp"
/**********************************/
/**           WARNING!           **/
/** This file is auto generated. **/
/**        DO NOT MODIFY         **/
/**********************************/

#include "$(contract.name).h"

.for contract.class
$(name:)::$(name:)()
{
}

$(name:)::~$(name:)()
{
}

.   for class.property
.   constant_ = (defined(property.extended) & extended = "true") ?? "const " ? ""
.   reference_ = (defined(property.extended) & extended = "true") ?? "&" ? ""
$(constant_)$(type:)$(reference_) $(class.name:)::$(name:c)() const {
    return $(name:c)_;
}
void $(class.name:)::set_$(name:c)($(constant_)$(type:) $(reference_)$(name:c)) {
    $(name:c)_ = $(name:c);
}

.   endfor

.endfor

.output "main.cpp"
/**********************************/
/**           WARNING!           **/
/** This file is auto generated. **/
/**        DO NOT MODIFY         **/
/**********************************/

#include "$(contract.name).h"
#include <iostream>

int main()
{
    std::cout << "TEST $(contract.name:)\\n";
.for contract.class
    {
        std::cout << "Testing Class $(name:)\\n";
        $(name:no,block) $(name:c);
.   for class.property
        std::cout << "Testing property $(name:c)\\n";
.       if ("$(type:)" = "unsigned int") | ("$(type:)" = "unsigned char") | ("$(type:)" = "long long int")
        $(type:) $(name) = 42;
.       endif
.       if "$(type:)" = "std::string"
        $(type:) $(name) = "sample string";
.       endif
.       if "$(type:)" = "std::vector<unsigned char>"
        $(type:) $(name) = { 4, 2, 3 };
.       endif
        $(class.name:c).set_$(name:c)($(name));
.       if "$(type:)" <> "std::vector<unsigned char>"
        std::cout << "Expected: " << $(name)
               << "\\nReturned:   " << $(class.name:c).$(name:c)();
.       endif
        if($(class.name:c).$(name:c)() == $(name))
            std::cout << "\\nPASS\\n";
        else
            std::cout << "FAIL\\n";
.   endfor
    }
.endfor

    return 0;
}
