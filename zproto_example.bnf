The following ABNF grammar defines the zproto example protocol:

    zproto_example  = *( LOG | STRUCTURES | BINARY | TYPES )

    ;  Log an event.                                                         

    LOG             = signature %d1 sequence version level event node peer time host const_host data
    signature       = %xAA %xA0             ; two octets
    sequence        = number-2              ; 
    version         = number-2              ; Version
    level           = number-1              ; Log severity level
    event           = number-1              ; Type of event
    node            = number-2              ; Sending node
    peer            = number-2              ; Refers to this peer
    time            = number-8              ; Log date/time
    host            = string                ; Originating hostname
    const_host      = string                ; Originating hostname
    data            = longstr               ; Actual log message

    ;  This message contains a list and a hash.                              

    STRUCTURES      = signature %d2 sequence aliases headers
    sequence        = number-2              ; 
    aliases         = strings               ; List of strings
    headers         = hash                  ; Other random properties

    ;  Deliver a multi-part message.                                         

    BINARY          = signature %d3 sequence flags public_key identifier address content
    sequence        = number-2              ; 
    flags           = 4OCTET                ; A set of flags
    public_key      = chunk                 ; Our public key
    identifier      = uuid                  ; Unique identity
    address         = frame                 ; Return address as frame
    content         = msg                   ; Message to be delivered

    ;  Demonstrate custom-defined types                                      

    TYPES           = signature %d4 sequence client supplier
    sequence        = number-2              ; 
    client          = person                ; Client contact
    supplier        = person                ; Supplier contact
    person          = forename surname mobile email
    forename        = string                ; Given name
    surname         = string                ; Family name
    mobile          = string                ; Mobile phone number
    email           = string                ; Email address

    ; A list of string values
    strings         = strings-count *strings-value
    strings-count   = number-4
    strings-value   = longstr

    ; A list of name/value pairs
    hash            = hash-count *( hash-name hash-value )
    hash-count      = number-4
    hash-value      = longstr
    hash-name       = string

    ; A chunk has 4-octet length + binary contents
    chunk           = number-4 *OCTET

    ; A uuid is 16-octet binary content 
    uuid            = 16OCTET

    ; A frame is zero or more octets encoded as a ZeroMQ frame
    frame           = *OCTET

    ; A msg is zero or more distinct frames
    msg             = *frame

    ; Strings are always length + text contents
    string          = number-1 *VCHAR
    longstr         = number-4 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-2        = 2OCTET
    number-4        = 4OCTET
    number-8        = 8OCTET
